#! /usr/bin/env python

import argparse
import sys

from commands import changes, settings, upstream
from commands.utils.messages import error


def main():

    parser = argparse.ArgumentParser(
        prog='git changes',
        version='git-changes 0.4.0',
        description=changes.__doc__,
        epilog='for more detail, use: git help changes'
    )

    # --------------------------------------------
    # associate sub-command
    # --------------------------------------------
    subparsers = parser.add_subparsers(help='sub-command help', dest='subcommand')
    associate_parser = subparsers.add_parser(
        'associate',
        help='associate a branch',
        description='associate a branch',
        usage='git changes associate [-h] [branch [-q]]'
    )
    associate_parser.set_defaults(func=changes.associate)

    # branch
    associate_parser.add_argument(
        'branch',
        help='associate this branch with another or returns the assoication if not included',
        nargs='?',
        metavar='[branch]'
    )

    # -q|--quiet
    associate_parser.add_argument(
        '-q',
        '--quiet',
        help='suppress all non-error output',
        action='store_true',
        default=argparse.SUPPRESS
    )

    # --------------------------------------------
    # unassociate sub-command
    # --------------------------------------------
    unassociate_parser = subparsers.add_parser(
        'unassociate',
        help="remove a branch's association",
        description="remove a branch's association",
    )
    unassociate_parser.set_defaults(func=changes.unassociate)

    # clean up: -a|--all or -p|--prune
    cleanup_group = unassociate_parser.add_mutually_exclusive_group()
    cleanup_group.add_argument(
        '-a',
        '--all',
        help='unassociate all branches',
        action='store_const',
        const='all',
        dest='cleanup'
    )
    cleanup_group.add_argument(
        '-p',
        '--prune',
        help='remove associations for branches that no longer exist',
        action='store_const',
        const='prune',
        dest='cleanup'
    )

    # -q|--quiet
    unassociate_parser.add_argument(
        '-q',
        '--quiet',
        help='suppress all non-error output',
        action='store_true'
    )

    # --------------------------------------------
    # view sub-command
    # --------------------------------------------
    view_parser = subparsers.add_parser(
        'view',
        help='view changes (default when omitted)',
        description='view changes',
        usage="""usage: git changes view [-h] [-r] [-c | -s | -d]
                        [--color [{always,never,auto}] | --no-color]
                        [branch]"""
    )
    view_parser.set_defaults(func=changes.changes)

    # branch
    branch_group = view_parser.add_mutually_exclusive_group()
    associated_reference = changes.get_association()
    branch_group.add_argument(
        'branch',
        help='show the commits between HEAD and the specified branch',
        nargs='?',
        metavar='[branch]',
        default=associated_reference if associated_reference else settings.get('git-changes.default-branch', default='master')
    )

    # -r|--remote
    branch_group.add_argument(
        '-r',
        '--remote',
        help='show the commits between the local and remote head',
        action='store_const',
        const=upstream.upstream(include_remote=True),
        dest='branch'
    )

    # details
    details_group = view_parser.add_mutually_exclusive_group()
    details_group.add_argument(
        '-c',
        '--count',
        help='show as a count of changes',
        action='store_const',
        const='count',
        dest='details'
    )
    details_group.add_argument(
        '-s',
        '--stat',
        help='show as a diffstat',
        action='store_const',
        const='stat',
        dest='details'
    )
    details_group.add_argument(
        '-d',
        '--diff',
        help='show as a full diff',
        action='store_const',
        const='diff',
        dest='details'
    )

    # color
    color_group = view_parser.add_mutually_exclusive_group()
    color_group.add_argument(
        '--color',
        help='always color output',
        const='always',
        dest='color_when',
        nargs='?',
        choices=('always', 'never', 'auto'),
        default=settings.get('color.ui', default='auto')
    )
    color_group.add_argument(
        '--no-color',
        help='never color output',
        action='store_const',
        const='never',
        dest='color_when'
    )

    # default to view mode
    if len(sys.argv) == 1 or sys.argv[1] not in ('view', 'associate', 'unassociate') and '-h' not in sys.argv and '--help' not in sys.argv:
        sys.argv.insert(1, 'view')

    args = vars(parser.parse_args())
    if args.pop('subcommand') == 'associate' and not args['branch']:
        # suppressing output on retrieval makes no sense
        if 'quiet' in args:
            associate_parser.print_usage()
            error('argument -q/--quiet: not allowed without positional argument: branch', prefix='git changes: error:')
        args['func'] = changes.get_association
        del args['branch']

    func = args.pop('func')
    result = func(**args)
    if result:
        print result

if __name__ == '__main__':
    main()
