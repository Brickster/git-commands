#! /usr/bin/env python

import argparse
import re
import sys

from subprocess import call, check_output


def get_upstream(include_remote=False):
    """Get the upstream branch of the current branch."""

    branch_info = check_output(['git', 'status', '--porcelain', '--branch']).splitlines()[0]
    regex = "^##\s[-_a-zA-Z0-9]+\.{3}([-_a-zA-Z0-9]+/([-_a-zA-Z0-9]+))(?:\s\[.*\])?$"
    match = re.match(regex, branch_info)

    upstream_info = ''
    if match is not None:
        upstream_info = match.group(1) if include_remote else match.group(2)

    return upstream_info


def get_include_remote_default():
    """Get the default value for including remote info."""

    default = check_output(['git', 'settings', '-d', 'false', 'git-upstream.include-remote']).splitlines()[0]
    default = str(default).lower() == 'true'
    return default


def main(argv):

    parser = argparse.ArgumentParser(
        prog="git upstream",
        version="git-upstream 0.1.0",
        description="get the current upstream branch"
    )

    include_remote_group = parser.add_mutually_exclusive_group()
    include_remote_group.add_argument("-r", "--include-remote", help="include the remote name", action="store_true", dest="include_remote", default=get_include_remote_default())
    include_remote_group.add_argument("-R", "--no-include-remote", help="don't include the remote name", action="store_false", dest="include_remote")

    args = parser.parse_args()

    print get_upstream(args.include_remote)

if __name__ == "__main__":
    main(sys.argv[1:])
