#! /bin/bash

readonly VERSION="0.1.0"

. git-commands-utils

function main
{
    local include_remote=

    while getopts ":rR-:" opt; do
        case $opt in
            -)
                case "${OPTARG}" in
                    include-remote)     include_remote=true;;
                    no-include-remote)  include_remote=false;;
                    *)                  error "Unimplemented option --${OPTARG}";;
                esac
                ;;
            r)  include_remote=true;;
            R)  include_remote=false;;
            \?) error "Invalid option: -$OPTARG";;
            :)  error "Option -$OPTARG requires an argument.";;
            *)  error "Unimplemented option: -$OPTARG";;
        esac
    done
    OPTIND=1

    # load defaults
    include_remote=${include_remote:-$(git settings -d false git-upstream.include-remote)}

    # get status with branch info
    local status_output=$(git status --porcelain --branch)
    IFS=$'\n' read -rd '' -a status_output <<< "$status_output"

    # if the branch has a remote, it'll be in the first line
    local branch_info="${status_output[0]}"

    local regex="^## [-[:alnum:]]+\.{3}([-[:alnum:]]+/([-[:alnum:]]+))([:space:]\[.*\])?"
    if [[ "$branch_info" =~ $regex ]]; then
        if $include_remote; then
            echo "${BASH_REMATCH[1]}"
        else
            echo "${BASH_REMATCH[2]}"
        fi
    fi
}

while getopts ":hv-:" opt; do
    case $opt in
        -)
            case "${OPTARG}" in
                help)       show_help;;
                version)    show_version "$VERSION";;
            esac
            ;;
        h)  show_help;;
        v)  show_version "$VERSION";;
    esac
done
OPTIND=1

main "$@"
exit 0
