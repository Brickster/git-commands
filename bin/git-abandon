#! /usr/bin/env python
#
# Drop a count or range of stashes.
#

import getopt
import re
import sys

from subprocess import call, check_output
from utils.help import man
from utils.messages import version, error, usage, info


def drop_stashes(start, end, dry_run=False):
    """Drop a range of stashes from start (inclusive) to end (exclusive)."""

    stash_count = len(check_output(['git', 'stash', 'list']).splitlines())
    if end < start:
        error("end of range cannot come before the start")
    elif start > stash_count:
        error("start to high", exit=False)
        error("only {} stashes exist".format(stash_count))
    elif end > stash_count:
        end = stash_count

    if dry_run:
        for i in range(start, end):
            stash = 'stash@{{{}}}'.format(i)
            stash_sha = check_output(['git', 'rev-parse', stash]).splitlines()[0]
            print "Would drop refs/{} ({})".format(stash, stash_sha)
    else:
        start_stash = 'stash@{{{}}}'.format(start)
        for i in range(start, end):
            stash_sha = check_output(['git', 'rev-parse', start_stash]).splitlines()[0]
            call(['git', 'stash', 'drop', '--quiet', start_stash])
            print 'Dropped refs/stash@{{{}}} ({})'.format(i, stash_sha)


def parse_range(string):
    """Parse a range from a string."""

    if re.match('^(?:\d+\.\.)?\d+$', string) is not None:
        numbers = string.split('..')
        numbers = [int(i) for i in numbers]
        numbers = numbers if len(numbers) == 2 else [0, numbers[0]]
    else:
        error('a number or range of stashes to drop must be specified', exit=False)
        usage("git abandon [<start>..]<end>")

    return numbers


def main(argv):
    try:
        opts, left_args = getopt.getopt(argv, "hvd", ["help", "version", "dry-run"])
    except getopt.GetoptError as e:
        # first check that the user didn't specify a negative value that looked like an option
        if e.opt in [str(i) for i in range(10)]:
            error("start/count cannot be negative")
        else:
            error(e.msg, exit=False)
            usage(["git abandon [(-d|--dry-run)] [<start>..]<end>", "git abandon (-h|--help)", "git abandon (-v|--version)"])

    dry_run = False
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            man()
        elif opt in ('-v', '--version'):
            version('0.1.0')
        elif opt in ('-d', '--dry-run'):
            dry_run = True

    if len(left_args) == 0:
        error('a number or range of stashes to drop must be specified', exit=False)
        usage("git abandon [<start>..]<end>")

    start, end = parse_range(left_args[0])
    drop_stashes(start, end, dry_run)

if __name__ == "__main__":
    main(sys.argv[1:])
