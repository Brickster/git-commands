#! /bin/bash

#
# Echos text to strerr.
#
# $1: the text to echo
#
function error
{
    echo "$1" >&2
    exit 1
}

#
# Shows git-settings man page.
#
function help
{
    man git-settings
    exit 0
}

#
# Shows usage error
#
function usage_error
{
    error "usage: git settings [(-d|--default) <value>] <key>
   or: git settings [(-h|--help)]
   or: git settings destroy <section>
   or: git settings print [(--local|--global|--system)] <section>"
}

#
# Removes a section from local, global, and system config files.
#
# $1: the section to destroy
#
function destroy
{
    local section="$1"

    # destory from each section and silence output
    git config --local --remove-section "$section" &>/dev/null
    git config --global --remove-section "$section" &>/dev/null
    git config --system --remove-section "$section" &>/dev/null
}

#
# Prints a given section.
#
# This is a section level version of git config --list.
#
# $1: the section to print
# $2: the configuration to use
#
function print
{
    local configuration=
    local section=
    local section_index=1
    local format=

    while getopts ":lgsp-:" opt; do
        case $opt in
            -)
                case "${OPTARG}" in
                    local)  configuration="local";;
                    global) configuration="global";;
                    system) configuration="system";;
                    pretty) format="pretty";;
                    *)      error "Unimplemented option --${OPTARG}";;
                esac
                ;;
            l)  configuration="local";;
            g)  configuration="global";;
            s)  configuration="system";;
            p)  format="pretty";;
            \?) error "Invalid option: -$OPTARG";;
            :)  error "Option -$OPTARG requires an argument.";;
            *)  error "Unimplemented option: -$OPTARG";;
        esac
        ((section_index++))
    done
    OPTIND=1

    # load configuration, if necessary
    format="${format:-$(git settings -d compact git-settings.print.format)}"

    if (( $# != 0 )) && (( $section_index == $# )); then
        args=("$@")
        section=${args[$section_index-1]}
    else
        error "usage: git settings print <section>"
    fi

    # get list of config settings
    configs=$(git config --list --"$configuration")
    IFS=$'\n' read -rd '' -a configs <<< "$configs"

    # parse the listed config for the relevant section
    section_count=0
    for config in "${configs[@]}"
    do
        regex="^$section\.([-[:alnum:]]+)=(.*)$"
        if [[ "$config" =~ $regex ]]; then
            local key="${BASH_REMATCH[1]}"
            local value="${BASH_REMATCH[2]}"

            # generate variables that act as map entries
            local key="$(echo "$key" | sed 's/-/_/g')" # replace all variable unsafe characters with underscores
            printf -v "map__$key" %s "$value"

            ((section_count++))
        fi
    done

    if [[ "$format" == "pretty" ]]; then
        if (( $section_count > 0 )); then
            title=
            regex="^([-[:alnum:]]+)\.(.*)$"
            if [[ "$section" =~ $regex ]]; then
                section="${BASH_REMATCH[1]}"
                subsection="${BASH_REMATCH[2]}"

                title="[$section \"$subsection\"]"
            else
                title="[$section]"
            fi
            echo "$title"

            # echo "[$section]"
            for key in ${!map__*}; do
                unnormalized_key="${key#map__}"
                unnormalized_key="$(echo "$unnormalized_key" | sed 's/_/-/g')"
                echo -e "\t$unnormalized_key=${!key}"
            done
        fi
    else
        for key in ${!map__*}; do
            echo "$section.${key#map__}=${!key}"
        done
    fi

    # unset each map entry so this method can be called again safely
    for key in ${!map__*}; do
        unset "$key"
    done
}

function default
{
    local default=
    local key_index=1
    local configuration=

    while getopts ":d:lgs-:" opt; do
        case $opt in
            -)
                case "${OPTARG}" in
                    default)
                        default="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        key_index=$((key_index + 2))
                        ;;
                    local)
                        configuration="local"
                        key_index=$((key_index + 1))
                        ;;
                    global)
                        configuration="global"
                        key_index=$((key_index + 1))
                        ;;
                    system)
                        configuration="system"
                        key_index=$((key_index + 1))
                        ;;
                    *)  error "Unimplemented option --${OPTARG}";;
                esac
                ;;
            d)
                default="$OPTARG"
                key_index=$((key_index + 2))
                ;;
            l)
                configuration="local"
                key_index=$((key_index + 1))
                ;;
            g)
                configuration="global"
                key_index=$((key_index + 1))
                ;;
            s)
                configuration="system"
                key_index=$((key_index + 1))
                ;;
            \?) error "Invalid option: -$OPTARG";;
            :)  error "Option -$OPTARG requires an argument.";;
            *)  error "Unimplemented option: -$OPTARG";;
        esac
    done

    if (( $# != 0 )) && (( $key_index == $# )); then
        args=("$@")
        key=${args[$key_index-1]}
    else
        error "usage: git section [(-d|--default) <default>] <key>"
    fi

    local value=
    if [[ -z "$configuration" ]]; then
        value=$(git config $key)
    else
        value=$(git config --"$configuration" $key)
    fi
    if [[ -z $value ]]; then
        value="$default"
    fi
    echo "$value"
}

if [[ "$1" =~ ^(destroy|print)$ ]]; then
    args=("$@") # so I can split the input
    args=("${args[@]:1}")
    "$1" "${args[@]}"
    exit 0
elif (( $# == 0 )); then
    usage_error
fi

default "$@"
