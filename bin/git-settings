#! /usr/bin/env python

import argparse

from commands import settings
from commands.utils import git, messages, parse_string
from commands.utils.parse_actions import as_enum


def main():

    default_format = git.get_config_value(
        'git-settings.list.format',
        default=settings.FormatOption.COMPACT,
        as_type=parse_string.as_enum(settings.FormatOption)
    )

    file_parser = argparse.ArgumentParser(add_help=False)
    file_group = file_parser.add_mutually_exclusive_group()

    # --local
    file_group.add_argument(
        '--local',
        help='limit to the local config file',
        action='store_const',
        const=settings.ConfigOption.LOCAL,
        dest='config'
    )

    # --global
    file_group.add_argument(
        '--global',
        help='limit to the global config file',
        action='store_const',
        const=settings.ConfigOption.GLOBAL,
        dest='config'
    )

    # --system
    file_group.add_argument(
        '--system',
        help='limit to the system config file',
        action='store_const',
        const=settings.ConfigOption.SYSTEM,
        dest='config'
    )

    # --file <file>
    file_group.add_argument(
        '--file',
        help='limit to a specific config file',
        dest='config',
        metavar='FILE'
    )

    parser = argparse.ArgumentParser(
        prog='git settings',
        description=settings.__doc__,
        epilog='for more detail, use: git help settings'
    )
    parser.add_argument('-v', '--version', action='version', help='show version and exit', version='git-settings 0.8.0')
    subparsers = parser.add_subparsers(help='sub-command help', dest='subcommand')

    # --------------------------------------------
    # list sub-command
    # --------------------------------------------
    list_parser = subparsers.add_parser(
        'list',
        help='list configuration settings respecting override precedence',
        description='list configuration settings respecting override precedence',
        parents=[file_parser]
    )
    list_parser.add_argument(
        'section',
        help='optionally, limit to a specific section',
        metavar='SECTION',
        nargs='?'
    )
    list_group = list_parser.add_mutually_exclusive_group()
    list_group.add_argument(
        '-f',
        '--format',
        help='print using a specific format (choices: compact, pretty, count, keys, sections)',
        choices=('compact', 'pretty', 'count', 'keys', 'sections'),
        default=default_format,
        dest='format_',
        action=as_enum(settings.FormatOption)
    )
    list_group.add_argument(
        '-p',
        '--pretty',
        help='use pretty format',
        action='store_const',
        const=settings.FormatOption.PRETTY,
        dest='format_'
    )
    list_group.add_argument(
        '-c',
        '--count',
        help='print the count of configurations',
        action='store_const',
        const=settings.FormatOption.COUNT,
        dest='format_'
    )
    list_group.add_argument(
        '-k',
        '--keys',
        help='list the keys for a section',
        action='store_const',
        const=settings.FormatOption.KEYS,
        dest='format_'
    )
    list_group.add_argument(
        '-s',
        '--sections',
        help='list only section names',
        action='store_const',
        const=settings.FormatOption.SECTIONS,
        dest='format_'
    )
    list_parser.set_defaults(func=settings.list_)

    # --------------------------------------------
    # destroy sub-command
    # --------------------------------------------
    destroy_parser = subparsers.add_parser(
        'destroy',
        help='destroy a section from the local, global, and system config files',
        description='destroy a section from the local, global, and system config files'
    )
    destroy_parser.add_argument('section', help='a section', metavar='SECTION')
    destroy_parser.add_argument(
        '-d',
        '--dry-run',
        help='print which configurations would be destroyed rather than removing them',
        action='store_true'
    )
    destroy_parser.set_defaults(func=settings.destroy)

    args = vars(parser.parse_args())

    subcommand = args.pop('subcommand')
    if subcommand == 'list' and not args['section'] and args['format_'] and args['format_'] == settings.FormatOption.KEYS:
        messages.error('argument -k/--keys: not allowed without positional argument section')

    func = args.pop('func')
    result = func(**args)
    if result:
        messages.info(result)


if __name__ == '__main__':
    main()
