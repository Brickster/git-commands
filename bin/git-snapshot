#! /usr/bin/env python
#
# Used to record the current state of the working directory without reverting it. This is effectively a shortcut to
# `git stash save` <message> followed by `git stash apply`.
#

import argparse
import os
import sys

from commands import snapshot

# specific usage message needed to include the '--' part
_USAGE_MESSAGE = 'git snapshot [-h] [-v] [-q] [-m <message>] [-- <file> [<file> ...]]'


def main():

    parser = argparse.ArgumentParser(
        prog='git snapshot',
        version='git-snapshot 0.4.0',
        usage=_USAGE_MESSAGE,
        description=snapshot.__doc__,
        epilog='for more detail, use: git help snapshot'
    )

    # -m|-message <message>
    parser.add_argument(
        '-m',
        '--message',
        help='the message to use when creating the underlying stash',
        metavar='<message>',
        default=None
    )

    # -q|--quiet
    parser.add_argument(
        '-q',
        '--quiet',
        help='suppress all non-error output',
        action='store_true',
        default=False
    )

    # -- <files> ..
    parser.add_argument(
        help='files to create a snapshot of',
        nargs=argparse.REMAINDER,
        metavar='<files>',
        dest='files'
    )

    # check that the remaining args match the format: '-- <files> [<files> ..]
    args = parser.parse_args()
    if args.files and len(args.files) > 1:
        if args.files[0] != '--':
            sys.exit('usage: {}{}git snapshot: error: unrecognized arguments: {}'.format(
                _USAGE_MESSAGE,
                os.linesep,
                ' '.join(args.files)
            ))
        args.files = args.files[1:]

    snapshot.snapshot(**vars(args))

if __name__ == '__main__':
    main()
