#! /usr/bin/env python

import argparse

from ast import literal_eval
from commands import state, settings
from utils.parse_actions import flag_as_value


def main():

    # status defaults
    default_show_status = literal_eval(settings.get('git-state.status.show', default='True'))

    # log defaults
    show_log = literal_eval(settings.get('git-state.log.show', default='True'))
    if show_log:
        default_log_count = literal_eval(settings.get('git-state.log.count', default='10'))
    else:
        default_log_count = 0

    # reflog defaults
    show_reflog = literal_eval(settings.get('git-state.reflog.show', default='True'))
    if show_reflog:
        default_reflog_count = literal_eval(settings.get('git-state.reflog.count', default='5'))
    else:
        default_reflog_count = 0

    # branches defaults
    default_show_branches = literal_eval(settings.get('git-state.branches.show', default='True'))

    # stashes defaults
    default_show_stashes = literal_eval(settings.get('git-state.stashes.show', default='True'))

    # general defaults
    default_show_empty = literal_eval(settings.get('git-state.show-empty', default='False'))
    default_format = settings.get('git-state.format', default='compact')
    default_show_color = settings.get('color.ui', default="always")

    parser = argparse.ArgumentParser(
        prog="git state",
        version="git-state 0.2.0",
        description="view the state of the working tree"
    )

    # status
    status_group = parser.add_mutually_exclusive_group()
    status_group.add_argument(
        "-s",
        "--status",
        help="show the status section",
        action="store_true",
        dest="show_status",
        default=default_show_status
    )
    status_group.add_argument(
        "-S",
        "--no-status",
        help="don't show the status section",
        action="store_false",
        dest="show_status"
    )

    # log
    log_group = parser.add_mutually_exclusive_group()
    log_group.add_argument(
        "-l",
        "--log",
        help="limit the commits in the log section",
        type=int,
        dest="log_count",
        metavar="<count>",
        default=default_log_count
    )
    log_group.add_argument(
        "-L",
        "--no-log",
        help="don't show the log section",
        action=flag_as_value(0),
        dest="log_count",
        nargs=0
    )
    log_group.add_argument(
        "--full-log",
        help="show the full log",
        action=flag_as_value(-1),
        dest="log_count",
        nargs=0
    )

    # reflog
    reflog_group = parser.add_mutually_exclusive_group()
    reflog_group.add_argument(
        "-r",
        "--reflog",
        help="limit the reflog section",
        type=int,
        dest="reflog_count",
        metavar="<count>",
        default=default_reflog_count
    )
    reflog_group.add_argument(
        "-R",
        "--no-reflog",
        help="don't show the reflog section",
        action=flag_as_value(0),
        dest="reflog_count",
        nargs=0
    )
    reflog_group.add_argument(
        "--full-reflog",
        help="show the full reflog",
        action=flag_as_value(-1),
        dest="reflog_count",
        nargs=0
    )

    # branches
    branches_group = parser.add_mutually_exclusive_group()
    branches_group.add_argument(
        "-b",
        "--branches",
        help="show the branches section",
        action="store_true",
        dest="show_branches",
        default=default_show_branches
    )
    branches_group.add_argument(
        "-B",
        "--no-branches",
        help="don't show the branches section",
        action="store_false",
        dest="show_branches"
    )

    # stashes
    stashes_group = parser.add_mutually_exclusive_group()
    stashes_group.add_argument(
        "-t",
        "--stashes",
        help="show the stashes section",
        action="store_true",
        dest="show_stashes",
        default=default_show_stashes
    )
    stashes_group.add_argument(
        "-T",
        "--no-stashes",
        help="don't show the stashes section",
        action="store_false",
        dest="show_stashes"
    )

    # color
    color_group = parser.add_mutually_exclusive_group()
    color_group.add_argument(
        "-c",
        "--color",
        help="always color output",
        action="store_true",
        dest="show_color",
        default=default_show_color
    )
    color_group.add_argument(
        "-C",
        "--no-color",
        help="never color output",
        action="store_false",
        dest="show_color"
    )

    # format
    format_group = parser.add_mutually_exclusive_group()
    format_group.add_argument(
        "-f",
        "--format",
        help="format the each section (choices: compact, pretty)",
        choices=("pretty", "compact"),
        metavar="<format>",
        dest="format",
        default=default_format
    )
    format_group.add_argument(
        "-p",
        "--pretty",
        help="show in pretty format",
        action=flag_as_value("pretty"),
        dest="format",
        nargs=0
    )

    # show empty
    show_empty_group = parser.add_mutually_exclusive_group()
    show_empty_group.add_argument(
        "-e",
        "--show-empty",
        help="show empty sections",
        action="store_true",
        dest="show_empty",
        default=default_show_empty
    )
    show_empty_group.add_argument(
        "-E",
        "--no-show-empty",
        help="don't show empty sections (does not apply to status)",
        action="store_false",
        dest="show_empty"
    )

    state.state(**vars(parser.parse_args()))

if __name__ == "__main__":
    main()
