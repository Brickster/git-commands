#! /bin/bash

#
# A more concise and comprehensive version of `git status` and `git log` in one command.
#

#
# Echos text to strerr.
#
# $1: the text to echo
#
function error
{
    echo "$1" >&2
    exit 1
}

#
# Shows git-state man page.
#
function help
{
    man git-state
    exit 0
}

#
# Determines whether there are stashes or not
#
function stash_not_empty
{
    stashes=$(git stash list 2>&1)
    IFS=$'\n' read -rd '' -a stashes <<< "$stashes"

    if (( ${#stashes[@]} == 0 )); then
        return 1
    fi
    return 0
}

#
# Echos a section of the state.
#
# Optionally, the output can be echoed in pretty format. Pretty format includes pre- and a- pended newlines
# as well as tabs starting every line.
#
# $1: the section title
# $2: the text to pretty print
# $3: whether the section should be echoed in pretty format
#
function echo_section
{
    title="$1"
    text="$2"
    use_pretty="$3"

    echo -e "# ${green}$title${nocolor}"
    if $use_pretty && [[ ! -z "$text" ]]; then

        IFS=$'\n' read -rd '' -a text <<< "$text"
        tab="    "

        echo
        count=${#text[@]}
        for ((i=0;i<count;i++)); do
            echo "$tab${text[i]}"
        done
        echo

    elif $use_pretty; then
        # there's no text but we still want some nicer formatting
        echo
    elif [[ ! -z "$text" ]]; then
        echo -e "$text"
    fi
}

green='\x1B[0;32m'
nocolor='\x1B[0m'

no_stashes=false
show_empty=false
color="always"
while getopts ":hpcCeLsSbBRTl:r:-:" opt; do
    case $opt in
        -)
            case "${OPTARG}" in
                log)
                    log_count="${!OPTIND}"
                    OPTIND=$(( $OPTIND + 1 ))
                    ;;
                reflog)
                    reflog_count="${!OPTIND}"
                    OPTIND=$(( $OPTIND + 1 ))
                    ;;
                full-log)       log_count=-1;;
                no-log)         log_count=0;;
                full-reflog)    reflog_count=-1;;
                no-reflog)      reflog_count=0;;
                status)         show_status=true;;
                no-status)      show_status=false;;
                branches)       show_branches=true;;
                no-branches)    show_branches=false;;
                no-stashes)     no_stashes=true;;
                show-empty)     show_empty=true;;
                color)          color="always";;
                pretty)         format="pretty";;
                no-color)
                    color="never"
                    green=""
                    nocolor=""
                    ;;
                help)           help;;
                *)              error "Unimplemented option --${OPTARG}";;
            esac
            ;;
        c)  color="always";;
        C)
            color="never"
            green=""
            nocolor=""
            ;;
        e)  show_empty=true;;
        l)
            log_count="$OPTARG"
            show_log=true
            ;;
        L)  show_log=false;;
        r)
            reflog_count="$OPTARG"
            show_reflog=true
            ;;
        R)  reflog_count=0;;
        s)  show_status=true;;
        S)  show_status=false;;
        b)  show_branches=true;;
        B)  show_branches=false;;
        T)  no_stashes=true;;
        p)  format="pretty";;
        h)  help;;
        \?) error "Invalid option: -$OPTARG";;
        *)  error "Unimplemented option: -$OPTARG";;
    esac
done

# load unset values from config
show_log="${show_log:-"$(git settings -d true git-state.log.show)"}"
log_count="${log_count:-"$(git settings -d 10 git-state.log.count)"}"
show_reflog="${show_reflog:-"$(git settings -d true git-state.reflog.show)"}"
reflog_count="${reflog_count:-"$(git settings -d 5 git-state.reflog.count)"}"
show_status="${show_status:-"$(git settings -d true git-state.status.show)"}"
show_branches="${show_branches:-"$(git settings -d true git-state.branches.show)"}"

# determine formatting
format="${format:-$(git settings -d compact git-state.format)}"
if [[ "$format" == "pretty" ]]; then
    pretty=true
else
    pretty=false
fi

# status
if $show_status; then
    # make sure status will output ANSI codes
    # this must be done using config since status has no --color option
    status_color=$(git config color.status)
    git config color.status "$color"

    # get the --branch part of 'git status --short --branch'
    status_info=$(git status --short --branch)
    IFS=$'\n' read -rd '' -a status_info <<< "$status_info"
    title="${status_info[0]}"
    title="${title##"## "}"

    status_info=$(git status --short)

    # an extra $nocolor used to make color print in its own coloring
    echo_section "status $nocolor($title)" "$status_info" "$pretty"

    # reset color.status to its original setting
    if [[ -z "$status_color" ]]; then
        git config --unset color.status
    else
        git config color.status "$status_color"
    fi
fi

if $show_log && (( $log_count != 0 )); then
    log_output=$(git log -n "$log_count" --oneline --color="$color")
    echo_section "log" "$log_output" "$pretty"
fi

# reflog
if $show_reflog && (( $reflog_count != 0 )); then
    reflog_output=$(git reflog -n "$reflog_count" --color="$color")
    echo_section "reflog" "$reflog_output" "$pretty"
fi

# branches
if $show_branches; then
    branch_output=$(git branch -v --color="$color")
    echo_section "branches" "$branch_output" "$pretty"
fi

# stashes
if ! $no_stashes && ( $show_empty || stash_not_empty ); then
    stash_output=$(git stash list --oneline --color="$color")
    echo_section "stashes" "$stash_output" "$pretty"
fi
