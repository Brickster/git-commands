# git-tuck(1) -- stash specific files

## SYNOPSIS

`git tuck` [(`-m`|`--message`) <message>] [(`-q`|`--quiet`)]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[(`-i`|`--ignore-deleted`)|(`-I`|`--no-ignore-deleted`)]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- <file> [<file> ...]<br>
`git tuck` (`-h`|`--help`)<br>
`git tuck` (`-v`|`--version`)

## DESCRIPTION

Used to stash specific files rather than the all-or-nothing style of `git stash`.

## OPTIONS

* `-m`|`--message` <message>:
    The message to use when stashing the files.

* `-q`|`--quiet`:
		Suppress all non-error output.

* `-i`|`--ignore-deleted`:
    Suppress warnings related to not explicitly including deleted files.

    Pathspec expressions won't match deleted files unless they are explicitly
    included. If the intention is to tuck them, add absolute references to them.
    If they aren't supposed to be included, use this flag.

* `-I`|`--no-ignore-deleted`:
    Show warnings related to not explicitly including deleted files.

* `-h`|`--help`:
	Print a simple help message.

* `-v`|`--version`:
	Print version.

* --:
    Do not interpret any more arguments as options.

* <file> ...:
    Files to be tucked. The files can be absolute or specified using pathspecs.

## EXAMPLE

For repository:

```bash
$ git status --short
M  CONTRIBUTING.md
 M README.md
 M config.yml
M  file1.txt
MM file2.txt
 M file3.txt
?? CHANGELOG.md
?? file4.md
```

To stash all non-documentation related changes:

```bash
$ git tuck -m "non-docs" -- *.txt config.yml file4.md
Saved working directory and index state On master: non-docs
HEAD is now at 5a35bd5 Initial commit
$ git status --short
M  CONTRIBUTING.md
 M README.md
?? CHANGELOG.md
$ git stash list
stash@{0}: On master: non-docs
```

## CONFIGURATION

* `git-tuck.ignore-deleted` <bool>:
    Whether or not to ignore deleted files by default. Option (`-i`|`--ignore-deleted`) overrides this setting.

    Default: <false>

## SEE ALSO

git-stash(1), gitglossary(7)
