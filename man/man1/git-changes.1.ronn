# git-changes(1) -- lists the commits between this branch and a commit-ish

## SYNOPSIS

`git changes view` [(`-c`|`--count`)] [(`-s`|`--stat`)] [(`-d`|`--diff`)]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[`--color` [<when>]] [`--no-color`] [<commit-ish>]<br>
`git changes associate` [(`-q`|`--quiet`)] [(`-u`|`--upstream`)] [<commit-ish>]<br>
`git changes unassociate` [(`-a`|`--all`)] [(`-p`|`--prune`)] [(`-q`|`--quiet`)]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[(`-d`|`--dry-run`)]<br>
`git changes` (`-h`|`--help`)<br>
`git changes` (`-v`|`--version`)

## DESCRIPTION

`git-changes` lists the commits between the current branch and a commit-ish. Changes are defined as the commits between HEAD and the merge base calculated using the commit-ish.

## OPTIONS

* `view`:
    View changes between a branch and a commit-ish. This is the default when no subcommand is specified.

    * `commit-ish`:
        Show the commits between HEAD and the specified commit-ish. If not specified, following are considered and the first to evaluate is used: (1) config value `git-state.associations.<branch>.with`, (2) config value `git-changes.default-commit-ish`, (3) `master`

    * `-r`|`--remote`:
        Show the commits between the local and remote head.

    * `-c`|`--count`:
        Show as a count of changes.

    * `-s`|`--stat`:
        Show as a diffstat.

    * `-d`|`--diff`:
        Show as a full diff.

    * `--color` [<when>]:
        Color output. <when> must be one of `always`, `never`, or `auto`. Defaults to `color.ui` configuration value or `auto`.

    * `--no-color`:
        Never color output. Same as `--color=never`.

* `associate`:
    View/update the current association.

    * _None_:
        Print the current association.

    * <commit-ish>:
        Associate the current branch with a commit-ish. Once associated, <commit-ish> can be omitted when using `view` and the association will be used.

    * `-u`|`--upstream`:
        Associate the current branch with its upstream branch.

    * `-q`|`--quiet`:
        Suppress all non-error output. Cannot be used without <commit-ish>.

* `unassociate`:
    Remove associations.

    * _None_:
        Unassociate the current branch.

    * `-a`|`--all`:
        Unassociate all branches.

    * `-p`|`--prune`:
        Unassociate branches that no longer exist.

    * `-q`|`--quiet`:
        Suppress all non-error output.

    * `-d`|`--dry-run`:
        Show the association(s) that would be remove but do nothing.

* `-h`|`--help`:
    Print a simple help message.

* `-v`|`--version`:
    Print version.

## CONFIGURATION

* `git-changes.default-commit-ish` <string>:
    The default commit-ish to use when finding changes. Option <branch> overrides this setting.

    Default: _refs/heads/master_

* `git-changes.associations.*.with` <string>:
    Defines an association between the branch in the key and the value. The value must be a commit-ish. Under normal circumstances, these entries are created/removed automatically.

    Default: _refs/heads/master_

## SEE ALSO

git-diff(1), git-log(1)
