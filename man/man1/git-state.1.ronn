# git-state(1) -- a customizable view for the state of a working tree

## SYNOPSIS

`git state` [(`-s`|`--status`)] [(`-S`|`--no-status`)]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[`--show-*`] [`--no-show-*`]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[(`-e`|`--show-empty`)] [(`-E`|`--no-show-empty`)]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[(`-c`|`--color`) [<when>]] [(`-C`|`--no-color`)]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[(`-p`|`--pretty`)] [(`-f`|`--format`) <format>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[`--clear`] [`--no-clear`] [`--no-page`]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[`--ignore-extensions` [<extension> ...]]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[(`-o`|`--order`) <section> [<section> ...]]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[(`-O`|`--options`) _option_ [_option_ ...]]<br>
`git state` (`-h`|`--help`)<br>
`git state` (`-v`|`--version`)

## DESCRIPTION

Used to see a more concise and comprehensive view of the working directory through custom extensions.

## OPTIONS

* `-h`|`--help`:
	Print a simple help message.

* `-v`|`--version`:
	Print version.

* `-s`|`--status`:
	Print the status section.

* `-S`|`--no-status`:
    Don't print the status section.

* `--show-*`:
    Show extension *. Where * is the configuration key value. For instance, given:

    git-state.extentions.last-ten-commits=git log --oneline -10<br>
    git-state.extentions.last-ten-commits.name=last ten commits

    The show flag is `--show-last-ten-commits`.

* `--no-show-*`:
    Hide extension *.

* `-e`|`--show-empty`:
    Show empty sections rather than omitting them.

* `-E`|`--no-show-empty`:
	Omit empty sections. This does not apply to the status section.

* `-c`|`--color` [<when>]:
    Color output. <when> must be one of `always`, `never`, or `auto`. Defaults to `color.ui` configuration value or `auto`.

* `-C`|`--no-color`:
    Never color output. Same as `--color=never`.

* `-p`|`--pretty`:
	Display in pretty format. This is equivalent to `-f`|`--format` <pretty>.

* `-f`|`--format` <format>:
	The format used to print each section. Valid values include: <compact> and <pretty>.

* `--clear` :
	Clear the screen before printing.

* `--no-clear`:
	Do not clear the screen before printing.

* `--no-page`:
    Do not page output if it exceeds the terminal window.

* `--ignore-extensions` [<extension> ...]:
	A list of extensions to ignore when printing. If none are specified, all of them will be ignored. See **[EXTENSIONS][]** section for more detail.

* `-o`|`--order` <section> [<section> ...]:
	A custom section order.

* `-O`|`--options` _option_ [_option_ ...]:
    A list of options to pass to an extension. Options are formatted as `<extension_name>:<option>`. See **[EXTENSIONS][]** section for more detail.

## CONFIGURATION

* `git-state.status.show-clean-message` <bool>:
	True or false flag determining whether a message should be printed when the working directory is clean. Similar to `git status`.

	Default: <true>

* `git-state.format` <string>:
	The default formatting for git-state. Valid options include: `pretty` and `compact`. If no value is specified or an invalid value is entered, compact is used. The options `-f`|`--format` <format> or `-p`|`--pretty` will override this setting.

	Default: <compact>

* `git-state.status.show` <bool>:
	True or false flag determining whether the status section should show when no other related flags are specified. Options (`-s`|`--status`) and (`-S`|`--no-status`) override this value.

	Default: <true>

* `git-state.show-empty` <bool>:
	True or false flag determining whether empty sections should be shown. Options (`-e`|`--show-empty`) and (`-E`|`--no-show-empty`) override this value.

	Default: <false>

* `git-state.clear` <bool>:
	True or false flag determining whether to clear the screen before printing. Options `--clear` and `--no-clear` override this value.

	Default: <true>

* `color.ui` <string>:
	Determines whether or not colors are printed in the output. Options `--color` [<when>] and `--no-color` override this value.

	Default: <auto>

* `git-state.extensions.*` <string>:
	A custom command to execute and print as its own section. See **[EXTENSIONS][]** section for more detail.

* `git-state.extensions.*.name` <string>:
	A custom name for an extension. If not specified, the extension key is used. See **[EXTENSIONS][]** section for more detail.

* `git-state.extensions.*.options` <string>:
	Options to pass to the extension. These are merged with any command line options for the extension. See **[EXTENSIONS][]** section for more detail.

* `git-state.extensions.*.show` <bool>:
	True or false flag determining whether to show the extension. Options `--show-*` and `--no-show-*` override this value. See **[EXTENSIONS][]** section for more detail.

	Default: <true>

* `git-state.extensions.*.color` <bool>:
	Whether the extension should be called with `--color=<when>`.

	Default: <true>

* `git-state.order` <string>:
	Custom order in which to print sections. Multiple section names are separated by a pipe (|) character. Any remaining sections not included are printed in the order they are handled internally. Option `-o`|`--order` overrides this value.

## EXTENSIONS

Out of the box, `git-state` isn't that useful. It simply reformats `git status --short`. That's where extensions come in. Extensions allow you to configure `git-state` to show the information useful to you. One can be created by setting a config in the following format:

```
git-state.extensions.<section-name>
```

The extension can be any valid script or command but must accept the flag `--color=`<when>. <when> will only be one of: <never> or <always>. Unlike `git state` itself, <when> won't ever be omitted when an extension is executed. The section name for an extension defaults to the key name but can be overridden by defining `git-state.extensions.<section-name>.name`.

```bash
$ git alias graph "git log --oneline --graph --all --decorate -10"
$ git config git-state.extenstions.graph "git graph"
$ git state
# status (state-extensions)

     M bin/commands/state.py
     M man/man1/git-state.ronn

# graph

    *   b27b2e5 (master) Merge branch 'fix-blank-lines'
    |\
    | * c40b5cf Fix upstream printing blank line
    | * 918d4f7 Fix settings printing blank line
    |/
    *   89736f9 Merge branch 'fix-documentation'
    |\
    | * 0e7cc6e Add see also section
    | * 059ff8b Fix settings documentation formatting
    | * 4d66f32 Fix changes documentation
    |/
    | * 48ab35e (HEAD, state-extensions) Fix status title
    | * bc45540 Refactor how arguments are passed into subcommands
    | * a0ea096 Refactor parameters

$
```

An extension can be ignored by listing it in `--ignore-extensions` [<extension> ...].

### Option Passing
Options can be passed to an extension using the `-O|--option` flag and are applied in the order they are received. Values passed this way must be formatted as `<extension_name>:<option>`. The `extension_name` refers to the value used in configuration defining the extension. Not the display name.

For instance, say an extension were defined to show changes: `git-state.extensions.changes=git changes`. It could be toggled to run in stat mode and against develop by using `--options changes:develop changes:--stat`.

Options can be handled per configuration by setting `git-state.extensions.*.options`.

### Hide an Extension
An extension can be hidden by setting `git-state.extensions.*.show` to `false`. This is useful for globally defined extensions that aren't needed for all repositories.

## SEE ALSO

git-status(1), git-config(1)
